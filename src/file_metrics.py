import os
import shutil
import csv
import sys
import magic
import git

def list_paths(root_tree, path=''):
    """
    Recursively iterate the files in a commit tree.

    Parameters
    ----------
    root_tree : git.objects.tree.Tree
    path : str
        Starting path for the iteration

    Returns
    -------
    Iterator[str]
    """
    for blob in root_tree.blobs:
        yield blob.name if path == '' else f'{path}/{blob.name}'
    for tree in root_tree.trees:
        yield from list_paths(tree, tree.name if path == '' else f'{path}/{tree.name}')

def main():
    if len(sys.argv) == 1:
        print('Repository path required')
        return
    directory_path = sys.argv[1]
    repo = git.Repo(directory_path)
    # Ensure that iteration doesn't begin from a detached HEAD
    repo.git.execute(['git', 'checkout', 'master'])
    repo.git.execute(['git', 'reset', '--hard', 'HEAD'])
    commit_metrics = []
    # All mime types across all commits
    headers = []
    for commit in repo.iter_commits(reverse=True):
        print(f'Commit: {commit.hexsha}')
        repo.git.checkout(commit.hexsha)
        mime_type_counts = {}
        for file in list_paths(commit.tree):
            path = f'{directory_path}/{file}'
            mime_type = magic.from_file(path, mime=True)
            # Headers
            if mime_type not in headers:
                headers.append(mime_type)
            # Mime Type Counts
            if mime_type in mime_type_counts:
                mime_type_counts[mime_type] += 1
            else:
                mime_type_counts[mime_type] = 1
            # APKs & executables
            if file.split('/')[-1] != 'Jonco-2016-02-04T15-05-09.mysql.zip' and (mime_type == 'application/x-pie-executable' or mime_type == 'application/x-dosexec' or mime_type == 'application/zip'):
                dest = f'./malicious/{commit.hexsha}'
                os.makedirs(dest)
                shutil.copy(path, dest)
        commit_metrics.append(
            {
                'hash': commit.hexsha,
                'metrics': mime_type_counts
            }
        )
    # Dump output in CSV
    with open('file_count.csv', 'w') as output_file:
        comparison_writer = csv.writer(output_file)
        comparison_writer.writerow(['Commit'] + headers)
        for commit in commit_metrics:
            frequency = [0 if mime not in commit['metrics'] else commit['metrics'][mime] for mime in headers]
            comparison_writer.writerow([commit['hash']] + frequency)

if __name__ == '__main__':
    main()
