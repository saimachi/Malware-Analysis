import statistics
import csv
import git

def list_paths(root_tree, path=''):
    for blob in root_tree.blobs:
        yield blob.name if path == '' else f'{path}/{blob.name}'
    for tree in root_tree.trees:
        yield from list_paths(tree, tree.name if path == '' else f'{path}/{tree.name}')

if __name__ == '__main__':
    directory_path = '/home/sai/web-malware/website-682886'
    repo = git.Repo(directory_path)
    rows = []
    for commit in repo.iter_commits(reverse=True):
        print('Commit:', commit.hexsha)
        repo.git.checkout(commit.hexsha)
        lengths_by_extension = {}
        for file in list_paths(commit.tree):
            path = f'{directory_path}/{file}'
            with open(path, 'rb') as file_obj:
                lines = file_obj.readlines()
                if len(lines) == 0:
                    continue
                extension = file.split('.')[-1]
                if extension not in lengths_by_extension:
                    lengths_by_extension[extension] = {}
                max_line_length = max([len(line) for line in lines])
                if max_line_length in lengths_by_extension[extension]:
                    lengths_by_extension[extension][max_line_length].append(file)
                else:
                    lengths_by_extension[extension][max_line_length] = [file]
        for _, files_by_length in lengths_by_extension.items():
            mean_max_line_length = statistics.mean(files_by_length.keys())
            diff_lengths = [abs(file_max_line_length - mean_max_line_length) for file_max_line_length in files_by_length.keys()]
            mad = statistics.median(diff_lengths)
            for longest_line_length, files in files_by_length.items():
                if longest_line_length - mean_max_line_length > 5 * mad:
                    rows.extend([[commit.hexsha, file, longest_line_length - mean_max_line_length, mad] for file in files])
    with open('obfuscation_analysis.csv', 'w') as outfile:
        writer = csv.writer(outfile)
        writer.writerow(['Commit', 'File', 'File Max Line Length Deviation', 'Commit MAD'])
        writer.writerows(rows)
